ALL NOTES
----------------------DAY1 NOTES----------------------------------
Selenium :
    -Basically a collection of jar files
    -The jar files have classes
    -Those classes have ready method
    -We use those jar files to do action on the browsers.
Maven :
    -Maven is a built automation tool
    -Help us to create  projects
    -It is giving us ready pom.xml file
Pom.xml
    -It helps us manage and add dependicies under project
-To be able to do any action on web element  we need to lacate that web element with selenium Webdriver.
-We are going to use findElement(By.locater)
findElement(By.locater)
    -this method will return a single webelement
    -return type is webelement
    -it is going to trow NosuchElementExeption if it cant find it.
Locater
-We have 8 locaters in selenium
1.name
2.classname
3.id
4.linktext
5.partiallinktext
6.tagname
7.xpath
8.css
----------------------DAY2 NOTES----------------------------------
Locators :
They are helping us to locate any webelement that you see on the webpage
8 different locators in selenium
1.name
2.linktext
3.partiallinktext
4.id
5.classname
6.tagname
7.css
8.xpath
1.Name:
 This locator will be looking into the whole HTML code and return the webelement with matching name attribute value
 --this one fill find and return the first webelemt it finds.
 syntax : driver.findElement(By.name("name attribute value")).
2.Linktext (equals the text)
--this locater allows us to locate links by their text
--this locater will only works if webelement has links
        How do i understand if the webelemt has links ?
        <a href="https//www.amazon.com"> Text amazon </a>
        Tagname --> a
        Attribute --> href
        Atrribute Value https//www.amazon.com
        Link text -- Text amazon
syntax : driver.findElement(By.linktext("Text amazon"));
3.Partiallinktext (contain the text)
--this locater allows us to locate links by their text
--but it doesnt need exact match for text
syntax : driver.findElement(By.partialLinktext("amazon"));
--To Search something in html
for mac click command+F
for windows ctrl+F
4.id
--id will locate by matching id attribute's value.
--id is unique for the specific webelement
--if if you have id and its not dynamic you should always use id .
dynamic (when you refresh if you see id value is changing that means id is dynamic )
syntax : driver.findElement(By.id("id attribute value"));
5.className :
--className is not unique , thats why it might have multiple values of the same attribute
--and it will return you the first one it finds
syntax : driver.findElement(By.className("class attribute value"));
----------------------DAY3 NOTES----------------------------------
//lets try with clasname
//        driver.findElement(By.className("gLFyf gsfi")).sendKeys("Apple");
        //if classname has space in it it is not good idea to use most of the case you will recive an error.
//        driver.findElement(By.className("gLFyf")).sendKeys("Apple");
        //you can remove after space and try to locate if classname is unique
        // if webelement also has classname attribute but it is not unique so it is not good idea to use.
// if id is dynamic means (when you refresh page and if you see id is changing that means is dynamic) it wont be usefull.
6-tagNAme
--you locate using tagname itself
--the usage of this one not too much
--it is good if you want to print same tag names
for ex : if you wanna print all links in the page then you will use this method
driver.findElements(By.tagName(a))
driver.findElements(By.tagName(div))
getText()
-- this one will be getting the text of given webelemnt
-- it is returning you the text of element as a String
<a id="ert" href="www.amazon.com">Amazon</a>
get text method will return you Amazon.
getAttribute("atrribute name")
<a id="ert" href="www.amazon.com">Amazon</a>
getAttribute("id")
this one will print you ert
Utilities Pakage
The reason of using utilities:
 1.to make our code more reusable
 2.easy to maintance
 (in the future if you wanna change something instead of going each class you will only change from utilities)
 3.Reduce typing of same codes over and over
 7-cssSelector
 it has own syntax
 common methods that you can use for css
 1- tagname[attribute='value']
 2- tagname.value --> . means in css locater className
 3-tagname#value # means id in css
 --you can also go from parent to child
 div[class='er4g'] > a
 8-xpath
 2 type xpath : Absulate and Relative
        1-Absuluate Xpath
        -start with /
        -you need to start top parent (begning of html code)
        -it is not usefull becasuse it takes from very top from to child
        html
            head
            body
                div
                div
                    div
                        a
                    div
                div
                div
            body
            head
        html
        for ex : /html/body/div/div/a
                 /html/body/div
        if you have siblings you can use [number]. it will pick the siblings for you
                         /html/body/div[2]
2-relative xpath
-- starts with //
-- double // allows you to locate your webelemt from anyehere in html code.
--more usefull wehn we compare for absulate xpath because you can start anywhere in html code
some syntax of using relative xpath
1-//tagname[@attribute='value']-- looks for tagname attribute and value
2-//tagname[contains(@attribute, 'value') --locate webelemnt  with the given value if contains
3-//tagname[.='text'] --looks for exact text match for any attribute
ex :
        <div class="est">
            <a class "def" href="www.gooogle.com">
         div
         tagname div
         attribute class
         attribute value est
Next Topics
Review Locaters
Css
Xpath
find elements
Checkbox
----------------------DAY4 NOTES----------------------------------
Impilicit wait
--An impilict wait is tell webdriver to pool the html code for a certain amount of time
when you trying to findelement
--if page is loaded imedillty it wont wait up to given second.
--type of selenium waits
findElements() method
•This method is used to find more than one webElement
•Return type:List <WebElement>
•If it cannot find a webElement:
•Does NOT throw exception.
•Only returns an empty list.
How do we go from parent to child using xpath?
    -->ex:   Locating anchor tag by its parent using xpath.
    //div[@id='hello'] --> this is locating the div
    //div[@id='hello']/a --> this is now locating the anchor tag using its parent
How do we go from CHILD TO PARENT using xpath?
    - When we want to go from child to parent: /..
    //a[@class='ghju']/..  this will locate the parent of a tag
    //xpath has abilty to go from child to parent
    //to be able to go from child to parrent you will need to use /..
" Selenium Methods:
-getTitle()
-navigate()
-getText()
-sendKeys()
-getCurrentUrl()
-getAttribute()
-getPageSource()
-getClass()
-findElement(By, by)
-click()
-findElements(By, by)
-isEnabled()
-close() and quit()"
-isDisplayed()
isSelected()
----------------------DAY5 NOTES----------------------------------
What is TestNG?
    -> TestNG is a unit testing tool that allows us create flow using Annotations.
    -> First we create methods, then we use TestNG annotations to create running flow.
        - We decide which method is test by typing @Test
        - Which method runs before tests
        - Which method runs after tests ...
    -> Annotations are a way of controlling the flow of the test.
    @Test annotation:
    -> Which allows us to run those methods(tests) without main method.
    @BeforeMethod:
    -> Makes the annotated method run before each @Test method.
    -> Usually used for setting up conditions, getting browsers, and pages.
        driver.get("");
        -maximize
        -implicit wait
    @AfterMethod:
    -> After method makes the method run AFTER each @Test method.
    -> Usually used to close things down such as closing the browser
    @BeforeClass:
    -> BeforeClass makes the annotated method run ONCE before all of test, beforemethod in the class.
    -> Used for setting up environments, opening browsers etc.
    @AfterClass:
    -> After class makes the annotated method run once after the tests in the class.
!!!!NOTE ===  If you are copy pasting from my code make sure to import from correct dependecy which is testNG option
ASSERTIONS:
    -> Assertions are coming from TestNG
    -> Assertions allows us to do our verification for our test cases
    -> You can pass an additional argument into assertion methods just to provide additional information about what failed.
            // to be able to print on the console
--> assertEquals :
        - This method expected two arguments to be passed: actual, expected.
        - It compares these two values and if they are exact match, it will pass.
--> assertTrue :
        - This method expects you to pass a boolean value. Or you have to pass a method that returns a boolean value.
        - If the boolean value is TRUE, it will pass. If not it will fail.
--> assertFalse :
        - This method expects you to pass a boolean value.
        - If the boolean value is FALSE, IT WILL PASS. If not, it will fail.
--> If you assertion fails, it will stop running for the current test in the same line where it failed.
It will move to the next test. And start running that one.
How to ignore a test?
1- Add @Ignore on top of the test.
In what order the tests are running if we have multiple tests?
    -> By default tests are running in alphabetical order. (Case sensitive capitals come first)
    priority => You can change the running order using priority.
     - We can change the priority which will change the running order of the tests
=======================
How do we handle dropdowns using Selenium?
HOW MANY TYPES OF DROPDOWN ARE THERE?
1- Select dropdowns: are created by using <select> tag in HTML
    <select>
        <option value="1"> option1 </option>
        <option value="2"> option2 </option>
        <option value="3"> option3 </option>
    </select>
--use select class to locate them.
by value,index and text
2- HTML dropdowns: these are the dropdowns that are created NOT USING <select>
    - These dropdowns are handled just like any other webElement you will see on the page.
----------------------DAY6 NOTES----------------------------------
web tables in HTML?
tr --> stands for table row
<td> stands for table data
<th> --> stands for table header. just makes things centered and bold.
<table>
    <thead>
        <tr>
            <td></td>
            <td></td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
        </tr>
    </tbody>
</table>
How do we handle web tables using Selenium webdriver?
    -> We create specific xpath locators to locate what we want to get from the table itself.
How do we handle web tables?
    - By creating custom locators to get whatever I need to get from the table.
    -> If I need to get the whole row, I create a locator that returns me the whole row.
    -> If I need to get 1 single cell, I need to create a locator that returns me 1 single cell.
//table[@id='ctl00_MainContent_orderGrid']/tbody/tr
//table[@id='ctl00_MainContent_orderGrid']//tr
ALERTS
    There are two types of alerts.
    1- HTML Alerts:
        -> How do we handle: We just locate just as another web element on the page.
        -> Then we click.
    2- JavaScript Alerts:
        --prompt,confirm box ,alert box
    HOW DO WE HANDLE ALERTS?
        -> Using Alerts.
        -> JS alerts are not part of the HTML structure. Therefore we need to switch the driver focus to the alert itself.
        1- Create an instance of Alert, then switch to alert.
                Alert alert = driver.switchTo().alert();
        2-  to accept, dismiss
            alert.accept();
            alert.dismiss();
IFRAMES
-> Iframes are basically <html> inside...
